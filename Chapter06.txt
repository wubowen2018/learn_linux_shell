************************************************************************************************************
------------------------------------------------------------------------------------------------------------
6.1什么是环境变量
	bash shell中环境变量分为两类
		全局变量
		局部变量
	1、全局环境变量
		全局环境变量对于shell会话和所有生成的子shell都是可见的
		局部变量则只对创建它们的shell可见。
		
		使用 env 或 printenv 命令查看全局变量
		使用 printenv VAR 显示个别的环境变量
		也可以使用 echo $VAR 显示变量
		作为命令参数 ls -$HOME
		
	2、局部变量
		局部环境变量只能在定义它们的进程中可见。
		
------------------------------------------------------------------------------------------------------------		
6.2设置用户定义变量
	1、设置局部环境变量
		1.直接赋值声明局部环境变量，赋值可以是字符串，也可以是数字
			$my_variable=Hello
			$echo my_variable
			Hello
		
		2.一旦声明了局部环境变量，只要在前面加上$就可以引用它
		
		3.局部环境变量不能在子shell中使用，因为不可见
		
		4.如果要给环境变量赋值有空格，需要用引号引起来
		
		5.局部环境变量全部使用小写的字母，可以是字母数字下划线，不要以数字开头
		
		6.环境变量和等号，以及等号和值之间【不可以】有空格
		
	2、设置全局环境变量
		在 设定全局环境变量的进程 所创建的 子进程 中，该变量都是可见的。
		1.创建全局环境变量
			创建环境变量的方法是 先创建一个局部环境变量，再把它导出(export)到全局环境中。
			
			$my_variable='I am Global now'
			$export my_variable   ##变量前不需要加$
			
		2.创建了全局环境变量，子shell中可以正常引用，但是子shell中改变了全局环境变量的值，
			父shell中的全局环境变量的值并不会改变
			子shell甚至无法使用 export 命令改变父shell中全局环境变量的值
			
------------------------------------------------------------------------------------------------------------
6.3 删除环境变量  --  【 unset 】
	unset引用环境变量的时候不需要加$
		unset my_variable  ##删除 my_variable
	
------------------------------------------------------------------------------------------------------------
6.4设置 PATH 环境变量
	1、当在shell键入一个外部命令式，shell会搜索系统目录，找到对应的程序。
		PATH 环境变量定义了用于进行命令和程序查找的目录
		PATH 中的目录使用冒号分隔
		
		添加目录到PATH
			$PATH=$PATH:/home/christine/Scripts
		如果希望子shell也能使用添加的目录，把修改后的 PATH 环境变量导出(export)。
			export PATH
		
		将目录加到 PATH 环境变量之后，就可以在虚拟目录结构中的任何位置执行程序。
		
	2、上面设置环境变量的方法是一次性的，退出shell后，消失。
		永久设置环境变量的方式之一：
			修改home目录里的 .bashrc文件，这样在当前用户启动shell时，会执行里面的命令
			就设置好了环境变量
			
		在/etc/下面有.bashrc 或者 .profile 是整个系统的加载文件，home下的针对具体的用户
	
------------------------------------------------------------------------------------------------------------	
6.6定位系统环境变量
	在登入Linux系统启动一个bash shell时，默认情况下bash会在几个文件中查找命令。
	这些文件叫作启动文件或环境文件。bash检查的启动文件取决于 启动bash shell的方式。
	3种启动shell的方式
		1.登录时作为默认登录shell
		2.作为非登录shell的交互式shell
		3. 作为运行脚本的非交互shell
	1、登录 shell
		1.当登录Linux系统时，bash shell会作为登录shell启动。
			登录shell会从5个不同的启动文件里读取命令：
			
			/etc/profile
			$HOME/.bash_profile
			$HOME/.bashrc
			$HOME/.bash_login
			$HOME/.profile
		
			【 /etc/profile 文件是系统上默认的bash shell的主启动文件。】
			系统上的每个用户登录时都会执行这个启动文件。
		
		2. /etc/profile文件
			【 /etc/profile文件是bash shell默认的的主启动文件。】
			在登录到linux系统时，系统会执行这个主启动文件，不同的发行版本，文件的内容不一样
			
		3.$HOME目录下的启动文件
			提供一个用户专属的启动文件来定义该用户所用到的环境变量。
			【 大多数Linux发行版只用这四个启动文件中的一到两个 】
			
			$HOME/.bash_profile
			$HOME/.bashrc
			$HOME/.bash_login
			$HOME/.profile
		
			每个用户都可以编辑上面的文件并添加自己的环境变量，
			这些环境变量会在每次启动bash shell会话时生效。
			
			shell会按照按照下列顺序，运行第一个被找到的文件，余下的则被忽略：
				$HOME/.bash_profile
				$HOME/.bash_login
				$HOME/.profile
				
				注意，这个列表中并没有$HOME/.bashrc文件。
				这是因为该文件通常通过其他文件运行的。
			
	2、交互式 shell 进程
		不是登录是启动的shell，比如是在命令行键入bash启动  --  交互式shell
		如果bash是作为交互式shell启动的，它就不会访问/etc/profile文件，只会检查用户HOME目录中的.bashrc文件。
		
		.bashrc文件有两个作用：
		一是查看/etc目录下通用的bashrc文件并执行，
		二是为用户提供一个定制自己的命令【别名】和【私有脚本函数】的地方。
		
	3、非交互式 shell
		系统执行shell脚本时用的就是这种shell。
		【 登录shell创建的子shell就是这种非交互式的shell 】
		非交互式的shell的环境变量继承自父sehll
		
		对于那些不启动子shell的脚本，变量已经存在于当前shell中了。
		所以就算没有设置BASH_ENV ，也可以使用当前shell的局部变量和全局变量。
		
	4、环境变量持久化  --  【 生成永久的环境变量（局部或者全局），别名 】
		最好是在 /etc/profile.d 目录中创建一个以.sh结尾的文件。
		把所有新的或修改过的全局环境变量设置放在这个文件中。
		【 在/etc/profile 文件中通过一个for循环调用了/etc/profile.d/里面的全部*.sh文件 】
		
------------------------------------------------------------------------------------------------------------
6.7数组变量  --  【 ${mytest[1]}  $mytest[*] 】

	1、环境变量数组的赋值和引用
		1.赋值
			环境变量可以当做数组来用，可以单独引用里面的值，也可以单做一个整体使用。
			给环境变量赋多个值只要在等号后面加括号，并把多个值放在括号里，以空格隔开
				$mytest=(val1 val2 val3 val4)
		
		2.引用单个元素
			使用echo $mytest 只会出现第一个值。
	
			要引用一个单独的数组元素，就必须用代表它在数组中位置的数值索引值。索引值要用方括号括起来
			$echo ${mytest[2]}  ##【 环境变量数组的索引值都是从零开始 】
			val3
	
		3.引用全部元素
			那么要引用整个数组的全部元素的方法是
				$echo ${mytest[*]}
				
	2、删除数组  --  【 unset 】 
		1.删除单个元素，使用unset只能删除值，再次饮用删除元素的索引，发现值是空的
			$ unset mytest[2]
			$
			$ echo ${mytest[*]}
			one two four five
			$
			$ echo ${mytest[2]}
			
			$ echo ${mytest[3]}
			four
			
		2.删除整个数组
			unset mytest
			
------------------------------------------------------------------------------------------------------------
6.8小结
	1、全局环境变量可以在对其作出定义的父进程所创建的子进程中使用。
		局部环境变量只能在定义它们的进程中使用
		
	2、Linux系统使用全局环境变量和局部环境变量存储系统环境信息。
	
	3、 PATH 环境变量定义了bash shell在查找可执行命令时的搜索目录。 
	
	4、可以修改 PATH 环境变量来添加自己的搜索目录 
	
	5、每次登录Linux系统，bash shell都会访问/etc/profile启动文件以及3个针对每个用户的本地启动文件：
		$HOME/.bash_profile、$HOME/.bash_login和$HOME/.profile。
		用户可以在这些文件中定制自己想要的环境变量和启动脚本。
		
	6、这些环境变量可在单个变量中包含多个值。
		可以通过指定索引值来访问其中的单个值 ${mytest[0]}，
		或是通过环境变量数组名来引用所有的值 ${mytest[*]}。
		
			

		
		
		
	














	
	
	
	
	
	
	
	
	
	
	
	
	
	
	