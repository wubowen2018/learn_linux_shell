************************************************************************************************************
------------------------------------------------------------------------------------------------------------
22.1使用变量
	两种变量
		内建变量
		自定义变量
	1、内建变量
		1.字段和数据分隔符变量
			数据字段变量 $0 表示问本行本身，$1 表示第一个字段，$2 表示第二个字段 ，以此类推
			数据字段分割符  默认是空白字符【空格 制表符】
				可以用 【 命令行 -F fs 】【 gawk程序中 FS 】来修改数据字段分隔符
				
		2.内建变量用于控制gawk如何处理输入输出数据中的字段和记录。
			FIELDWIDTHS   -->   由空格分隔的一列数字，定义了每个数据字段确切宽度
			FS   -->   输入字段分隔符
			RS   -->   输入记录分隔符
			OFS   -->   输出字段分隔符
			ORS   -->   输出记录分隔符
						
		3.OFS和FS具有相同的功能，只是用在print命令的输出上
			【 gawk将 OFS 设成一个空格 】
				print $1,$2,$3
				field1 field2 field3
			print 命令会自动将 OFS 变量的值放置在输出中的每个字段间，通过设置OFS可以实现任意字符串分割记录
			
			gawk 'BEGIN{FS=",";OFS="*"} {print $0,"-------", $1,$2,$3}' data4.txt 
			
		4.FIELDWIDTHS
			设定 FIELDWIDTHS 变量 来匹配记录中特定列的数据
			【 一旦设置了 FIELDWIDTH 变量，gawk就会忽略 FS 变量 】
			【 根据提供的字段宽度来计算字段 】
				$ cat data1b
				1005.3247596.37
				115-2.349194.00
				05810.1298100.1
				$ gawk 'BEGIN{FIELDWIDTHS="3 5 2 5"}{print $1,$2,$3,$4}' data1b
				100 5.324 75 96.37
				115 -2.34 91 94.00
				058 10.12 98 100.1
			   【3    5    2   5  】
			【一旦设定了 FIELDWIDTHS 变量的值，就不能再改变了。这种方法并不适用于变长的字段。】
		
		5.RS和ORS
			默认情况下，gawk将 RS 和 ORS 设为换行符。
			默认的 RS 值表明，输入数据流中的每行新文本就是一条新纪录。
			
		6.实例  --  处理包含地址，电话的记录
			Riley Mullen
			123 Main Street
			Chicago, IL 60601
			(312)555-1234
			
			思路：把 FS 变量设置成换行符，每一行都是一个单独的字段；  问题 -->  不知道哪里是新记录开始
				  把 RS 变量设置成空字符串，然后在数据记录间留一个空白行，
				  gawk会把每个空白行当作一个记录分隔符。
				  
			$ cat data2
			Riley Mullen
			123 Main Street
			Chicago, IL 60601
			(312)555-1234

			Frank Williams
			456 Oak Street
			Indianapolis, IN 46201
			(317)555-9876

			Haley Snell
			4231 Elm Street
			Detroit, MI 48201
			(313)555-4938
			$
			$ gawk 'BEGIN{FS="\n"; RS=""} {print $1,$4}' data2
			Riley Mullen (312)555-1234
			Frank Williams (317)555-9876
			Haley Snell (313)555-4938
				  
	2、数据变量
		ARGC   -->   当前命令行参数个数
		ARGIND   -->   当前文件在 ARGV 中的位置
		ARGV   -->   包含命令行参数的数组
		CONVFMT   -->   数字的转换格式（参见 printf 语句），默认值为 %.6 g
		ENVIRON   -->   当前shell环境变量及其值组成的关联数组
		ERRNO   -->   当读取或关闭输入文件发生错误时的系统错误号
		FILENAME   -->   用作gawk输入数据的数据文件的文件名
		FNR   -->   当前数据文件中的数据行数
		IGNORECASE   -->   设成非零值时，忽略 gawk 命令中出现的字符串的字符大小写
		NF   -->   数据文件中的字段总数
		NR   -->   已处理的输入记录数
		OFMT   -->   数字的输出格式，默认值为 %.6 g
		RLENGTH   -->   由 match 函数所匹配的子字符串的长度
		RSTART   -->   由 match 函数所匹配的子字符串的起始位置
		

	3、自定义变量
		任意数目的字母、数字和下划线，但不能以数字开头，区分大小写
		1.赋值
			testing="This is a test"
			print testing
			
			$ gawk '
			> BEGIN{
			> testing="This is a test"
			> print testing
			> testing=45
			> print testing
			> }'
			【变量多次赋值】
			
			$ gawk 'BEGIN{x=4; x= x * 2 + 3; print x}'
			11
			gawk编程语言包含了用来处理数字值的【标准算数操作符】。
			
		2.在命令行上给变量赋值  --  【 -v var=value 】
			$ cat script1
			BEGIN{FS=","}
			{print $n}
			$ gawk -f script1 n=2 data1
			data12
			data22
			data32
			
			【 n=2 命令行参数 】
			允许不修改脚本而改变脚本的行为。
			使用命令行参数来定义变量值在BEGIN里不可用。
			
			可以用 -v 命令行参数来解决这个问题。它允许你在 BEGIN 代码之前设定变量。
			在命令行上，-v 命令行参数必须放在【脚本代码之前】。
			$ cat script2
			BEGIN{print "The starting value is",n; FS=","}
			{print $n}
			$ gawk -v n=3 -f script2 data1
			The starting value is 3
			data13
			data23
			data33
			
------------------------------------------------------------------------------------------------------------
22.2处理数组
	gawk用关联数组来实现数组功能
	【 关联数组跟数字数组不同之处在于它的索引值可以是任意文本字符串。】
	1、定义数组
		var[index] = element
		
		capital["Illinois"] = "Springfield"
		capital["Indiana"] = "Indianapolis"
		capital["Ohio"] = "Columbus"
		【 引用数组变量时，必须包含索引值来提取相应的数据元素值。】
		
	2、遍历数组变量
		for (var in array)
		{
			statements
		}
		for在每次循环时将关联数组 array 的下一个 【索引值】 赋给变量 var 
		索引没有特定的顺序，只是返会犯对应的值。
	
	3、删除数组变量
		delete array[index]
		
------------------------------------------------------------------------------------------------------------
22.3使用模式
	1、正则表达式
		【 在使用正则表达式时，正则表达式必须出现在它要控制的程序脚本的左花括号前。】
		$ gawk 'BEGIN{FS=","} /11/{print $1}' data1
		data11
		
	2、匹配操作符
		【 匹配操作符（matching operator）允许将正则表达式限定在记录中的特定数据字段。】
		【 匹配操作符是波浪线（ ~ ） 。】
			$1 ~ /^data/
		特定字段 匹配操作符 正则表达式
		
		$ gawk -F: '$1 ~ /rich/{print $1,$NF}' /etc/passwd
		rich /bin/bash
		会在$1中匹配rich，找到会打印第一个和最后一个字段
		
		【 用 ! 符号来排除正则表达式的匹配。】
		$1 !~ /expression/

		【 如果记录中没有找到匹配正则表达式的文本，程序脚本就会作用到记录数据。】	
		$ gawk –F: '$1 !~ /rich/{print $1,$NF}' /etc/passwd
		root /bin/bash
		daemon /bin/sh
		bin /bin/sh
		sys /bin/sh
		
	3、数学表达式  --  匹配字段中的数字非常方便
		$ gawk -F: '$4 == 0{print $1}' /etc/passwd
		root
		sync
		shutdown
		halt
		operator
		
		1.可以使用任何常见的数学比较表达式。
			x == y ：值x等于y。
		  x <= y ：值x小于等于y。
		  x < y ：值x小于y。
		  x >= y ：值x大于等于y。
		  x > y ：值x大于y。
		【 用于文本比较的时候必须完全匹配 】
		$ gawk -F, '$1 == "data"{print $1}' data1
		$
		$ gawk -F, '$1 == "data11"{print $1}' data1
		data11
	
------------------------------------------------------------------------------------------------------------
22.4 结构化命令
	1、if
		if (condition)
		{
			statement1
		}
		else
		{
			statement2
		}
		if (condition) statement1;else statement2
		
		if后面的求值条件要用小括号括起来
		如果statement是多条语句，必须用花括号括起来
		
	2、while
		while (condition)
		{
			statements
		}
		
		$ cat data5
		130 120 135
		160 113 140
		145 170 215
		$ gawk '{
		> total = 0
		> i = 1
		> while (i < 4)
		> {
		> total += $i
		> i++
		> }
		> avg = total / 3
		> print "Average:",avg
		> }' data5
		Average: 128.333
		Average: 137.667
		Average: 176.667
		
		【 break continue 同样适用 】
		
	3、do-while
		do
		{
			statements
		} while (condition)
		
	4、for
		【 gawk编程语言支持C风格的 for 循环 】
		for( variable assignment; condition; iteration process)
		{
			statements
		}
		
------------------------------------------------------------------------------------------------------------
22.5格式化打印 【  printf 】
	【 gawk支持C语言式的格式化打印 】
	printf "format string", var1, var2 . . .
	format string 的格式 %[modifier]control-letter
		c   -->   将一个数作为ASCII字符显示
		d   -->   显示一个整数值
		i   -->   显示一个整数值（跟d一样）
		e   -->   用科学计数法显示一个数
		f   -->   显示一个浮点值
		g   -->   用科学计数法或浮点数显示（选择较短的格式）
		o   -->   显示一个八进制值
		s   -->   显示一个文本字符串
		x   -->   显示一个十六进制值
		X   -->   显示一个十六进制值，但用大写字母A~F
		
	3种修饰符
		width ：指定了输出字段最小宽度的数字值。如果输出短于这个值， printf 会将文本右对齐，并用空格进行填充。
			如果输出比指定的宽度还要长，则按照实际的长度输出。
	prec ：这是一个数字值，指定了浮点数中小数点后面位数，或者文本字符串中显示的最大字符数。
	- （减号） ：指明在向格式化空间中放入数据时采用左对齐而不是右对齐。
	【 printf在没有在行尾手动加上换行符时 会打印在一行 】
	
	printf "%-16s %s\n", $1, $4
	指定宽度和对齐方式
	
------------------------------------------------------------------------------------------------------------
22.6内建函数
	1、数学函数
		atan2(x, y)   -->   x/y的反正切，x和y以弧度为单位
		cos(x)   -->   x的余弦，x以弧度为单位
		exp(x)   -->   x的指数函数
		int(x)   -->   x的整数部分，取靠近零一侧的值
		log(x)   -->   x的自然对数
		rand( )   -->   比0大比1小的随机浮点值
		sin(x)   -->   x的正弦，x以弧度为单位
		sqrt(x)   -->   x的平方根
		srand(x)   -->   为计算随机数指定一个种子值
		
		【rand() 只在0和1之间（不包括0或1） 】
		
		按位操作函数
			and(v1, v2) ：执行值 v1 和 v2 的按位与运算。
		  compl(val) ：执行 val 的补运算。
		  lshift(val, count) ：将值 val 左移 count 位。
		  or(v1, v2) ：执行值 v1 和 v2 的按位或运算。
		  rshift(val, count) ：将值 val 右移 count 位。
		  xor(v1, v2) ：执行值 v1 和 v2 的按位异或运算。
		
	2、字符串函数
		asort(s [,d])--将数组s按数据元素值排序。索引值会被替换成表示新的排序顺序的连续数字。
					 另外，如果指定了d，则排序后的数组会存储在数组d中
					 
		asorti(s [,d])--将数组s按索引值排序。 生成的数组会将索引值作为数据元素值， 用连续数字索引来表明排序顺序。
					 另外如果指定了d，排序后的数组会存储在数组d中
					 
		gensub(r, s, h [, t])--查找变量$0或目标字符串t（如果提供了的话）来匹配正则表达式r。
		如果h是一个以g或G开头的字符串，就用s替换掉匹配的文本。如果h是一个数字，它表示要替换掉第h处r匹配的地方
		
		gsub(r, s [,t])--查找变量$0或目标字符串t（如果提供了的话）来匹配正则表达式r。
					 如果找到了，就全部替换成字符串s
					 
		index(s, t)--返回字符串t在字符串s中的索引值，如果没找到的话返回 0
		
		length([s])--返回字符串s的长度；如果没有指定的话，返回$0的长度
		
		match(s, r [,a])--返回字符串s中正则表达式r出现位置的索引。
					  如果指定了数组a，它会存储s中匹配正则表达式的那部分
					  
		split(s, a [,r])--将s用 FS 字符或正则表达式r（如果指定了的话）分开放到数组a中。返回字段的总数
		
		sprintf(format,variables)--用提供的format和variables返回一个类似于printf输出的字符串
		
		sub(r, s [,t])--在变量$0或目标字符串t中查找正则表达式r的匹配。如果找到了，就用字符串s替换掉第一处匹配
		
		substr(s, i [,n])--返回s中从索引值i开始的n个字符组成的子字符串。如果未提供n，则返回s剩下的部分
		
		tolower(s)--将s中的所有字符转换成小写
		
		toupper(s)--将s中的所有字符转换成大写
		
		【asort(array,newArray)函数，把array里的元素的值排序，保存到newArray里面，索引换数字】
		
		【split 函数是将数据字段放到数组中】
		$ gawk 'BEGIN{ FS=","}{
		> split($0, var)
		> print var[1], var[5]
		> }' data1
		data11 data15
		data21 data25
		data31 data35
			
	3、时间函数
		mktime(datespec)   -->   将一个按YYYY MM DD HH MM SS [DST]格式指定的日期转换成时间戳值
		
		strftime(format[,timestamp])   -->   将当前时间的时间戳或timestamp（如果提供了的话）转化格式化日期
									（采用shell函数date()的格式）
									
		systime( )   -->   返回当前时间的时间戳
		
		【epoch时间（自1970-01-01 00:00:00 UTC到现在的秒数）】
		systime()--epoch时间戳
		
		$ gawk 'BEGIN{
		> date = systime()
		> day = strftime("%A, %B %d, %Y", date)
		> print day
		> }'
		Friday, December 26, 2014
		【 转换过程中使用了shell命令 date 的日期格式化字符 】

------------------------------------------------------------------------------------------------------------
22.7自定义函数
	1、定义函数
		function name([variables])
		{
			statements
		}
		
		返回值
			可以用return语句返回值，或者是能计算出值的算式
				return value
				
			可以将函数的返回值赋给gawk程序中的一个变量
			x = myrand(100)
	
	2、使用自定义函数
		1.在定义函数时，它必须出现在所有代码块之前（包括 BEGIN 代码块）。
			$ gawk '
			> function myprint()
			> {
			> printf "%-16s - %s\n", $1, $4
			> }
			> BEGIN{FS="\n"; RS=""}
			> {
			> myprint()
			> }' data2
			Riley Mullen - (312)555-1234
			Frank Williams - (317)555-9876
			Haley Snell - (313)555-4938
			
	3、创建函数库
		1.第一步：创建一个存储所有gawk函数的文件
			$ cat funclib
			function myprint()
			{
				printf "%-16s - %s\n", $1, $4
			}
			
			function myrand(limit)
			{
				return int(limit * rand())
			}
			
			function printthird()
			{
				print $3
			}
			
		2.第二步：在命令行上同时指定库文件和程序文件
		【可以在同一个命令行中使用多个 -f 参数】
			$ cat script4
			BEGIN{ FS="\n"; RS=""}
			{
			myprint()
			}
			$ gawk -f funclib -f script4 data2    #同一个命令行中使用多个 -f 参数
			Riley Mullen - (312)555-1234
			Frank Williams - (317)555-9876
			Haley Snell - (313)555-4938

------------------------------------------------------------------------------------------------------------
22.8实例
	$ cat scores.txt
	Rich Blum,team1,100,115,95
	Barbara Blum,team1,110,115,100
	Christine Bresnahan,team2,120,115,118
	Tim Bresnahan,team2,125,112,116
	
	#!/bin/bash
	for team in $(gawk –F, '{print $2}' scores.txt | uniq)
	do
		gawk –v team=$team 'BEGIN{FS=","; total=0}
		{
			if ($2==team)
			{
				total += $3 + $4 + $5;
			}
		}
		END {
			avg = total / 6;
			print "Total for", team, "is", total, ",the average is",avg
		}' scores.txt
	done
			
	$ ./bowling.sh
	Total for team1 is 635, the average is 105.833
	Total for team2 is 706, the average is 117.667
	
------------------------------------------------------------------------------------------------------------
22.9小结
	
			
			
			

	































