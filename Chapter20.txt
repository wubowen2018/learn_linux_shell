************************************************************************************************************
------------------------------------------------------------------------------------------------------------
20.2定义 BRE 模式
	1、纯文本 -- 【 模式 <= 目标 】
	
		$ echo "This is a test" | sed -n '/test/p'
		This is a test
		
		【 正则表达式模式都区分大小写 】
		$ echo "This is a test" | sed -n '/this/p'
		$ 
		
		【 不用写出整个单词 】
		$ echo "The books are expensive" | sed -n '/book/p'
		The books are expensive
		
		【 可以在正则表达式中使用空格和数字。】
		【 在正则表达式中，空格和其他的字符并没有什么区别 】
		$ echo "This is line number 1" | sed -n '/ber 1/p'
		This is line number 1
	
	2、特殊字符  --  【 .*[]^${}\+?|() 】
		【 不能在文本模式中单独使用这些字符，真要用就转义 】
		
	3、锚字符
		1.锁定行首  --  【 ^ 】
			锁定在一行数据的开始，以换行符为换行依据
				$ cat data3
				This is a test line.
				this is another test line.
				A line that tests this feature.
				Yet more testing of this
				$ sed -n '/
				^ this/p' data3
				this is another test line.
				
			【 将脱字符放到模式开头之外的其他位置， 那么它就跟普通字符一样 】
				$ echo "This ^ is a test" | sed -n '/s  ^ /p'
				This ^ is a test
				
		2.锁定行尾  --  【 $ 】
			锁定在一行数据的尾部
				echo "This is a good book" | sed -n '/book$/p'
					
		3. 组合锚点
			a、假定要查找只含有特定文本模式的数据行。
				$ cat data4
				this is a test of using both anchors
				I said this is a test
				this is a test
				I'm sure this is a test.
				$ sed -n '/
				^ this is a test$/p' data4
				this is a test
				
			b、第二种情况  删除所有的空行
				sed '/^$/d' filename
				
	4、点号字符
		【 特殊字符点号用来匹配【除换行符】之外的任意单个字符。】$ cat data6
			This is a test of a line.
			The cat is sleeping.
			That is a very nice hat.
			This test is at line four.
			at ten o'clock we'll go home.
			$ sed -n '/.at/p' data6
			The cat is sleeping.
			That is a very nice hat.
			This test is at line four.
			
	5、字符组  --  【 [] 】
		方括号中包含所有你希望出现在该字符组中的字符。
		1.把所有可能的情况放在一个中括号中
			$ sed -n '/[ch]at/p' data6
			$ echo "Yes" | sed -n '/[Yy]es/p'
			【 每一个字符组匹配一个字符 】
		
		2.把多个字符组放在一起就可以匹配多个字符
			$ sed -n '
			> /
			> ^ [0123456789][0123456789][0123456789][0123456789][0123456789]$/p
			> ' data8
			这个例子，匹配了只有五位数字的行
			
	6、排除型字符组  --  【 [^xxx] 】	
		$ sed -n '/[^ ch]at/p' data6
		This test is at line four.
		
	7、区间  --  【 [0-9]  [a-z]  [A-Z]  】
		【 还可以在单个字符组指定多个不连续的区间。】
			$ sed -n '/[a-ch-m]at/p' data6
			The cat is sleeping.
			That is a very nice hat.
			
	8、特殊的字符组
		[[:alpha:]]   -->   匹配任意字母字符，不管是大写还是小写
		[[:alnum:]]   -->   匹配任意字母数字字符0~9、A~Z或a~z
		[[:blank:]]   -->   匹配空格或制表符
		[[:digit:]]   -->   匹配0~9之间的数字
		[[:lower:]]   -->   匹配小写字母字符a~z
		[[:print:]]   -->   匹配任意可打印字符
		[[:punct:]]   -->   匹配标点符号
		[[:space:]]   -->   匹配任意空白字符：空格、制表符、NL、FF、VT和CR
		[[:upper:]]   -->   匹配任意大写字母字符A~Z
		
	9、星号
		【 字符后面放置星号表明该字符必须在匹配模式的文本中出现0次或多次。】
			$ echo "ik" | sed -n '/ie*k/p'
			ik
			$ echo "iek" | sed -n '/ie*k/p'
			iek
			$ echo "ieek" | sed -n '/ie*k/p'
			ieek
			$ echo "ieeek" | sed -n '/ie*k/p'
			ieeek
			
		2.这个模式符号广泛用于处理有常见拼写错误或在不同语言中有拼写变化的单词。
		举个例子，如果需要写个可能用在美式或英式英语中的脚本
			$ echo "I'm getting a color TV" | sed -n '/colou*r/p'
			I'm getting a color TV
			$ echo "I'm getting a colour TV" | sed -n '/colou*r/p'
			I'm getting a colour TV
			
		3.点号特殊字符和星号特殊字符组合能够匹配任意数量的任意字符。
			它通常用在数据流中两个可能相邻或不相邻的文本字符串之间。
			$ echo "this is a regular pattern expression" | sed -n '
			> /regular.*expression/p'
			this is a regular pattern expression
			
		4.星号还能用在字符组上。它允许指定可能在文本中出现多次的字符组或字符区间。
			$ echo "bt" | sed -n '/b[ae]*t/p'
			bt
			$ echo "bat" | sed -n '/b[ae]*t/p'
			bat
			$ echo "bet" | sed -n '/b[ae]*t/p'
			bet
			$ echo "btt" | sed -n '/b[ae]*t/p'
			btt
			
------------------------------------------------------------------------------------------------------------
20.3 扩展正则表达式  --  gawk程序能够识别ERE模式，但sed编辑器不能。
	sed编辑器和gawk程序的正则表达式引擎之间是有区别的。
	gawk程序可以使用大多数扩展正则表达式模式符号，并且能提供一些额外过滤功能，而这些功能都是sed编辑器所不具备的。
	
	1、问号  --  【 ？】
		问号表明前面的字符可以出现0次或1次  相当于{0,1}
		
	2、加号  --  【 + 】
		加号表明前面的字符可以出现1次或多次，但必须至少出现1次。  相当于 {1,}
		
	3、星号 --  【 * 】
		星号表明前面的字符出现任意次
		
	4、使用花括号
		{n}  --  出现n次
		{m,n}  -- 至少m次，至多n次
	
	5、管道符号  --  【 | 】
		expr1|expr2|...	
		
		$ echo "The cat is asleep" | gawk '/cat|dog/{print $0}'
		The cat is asleep
		$ echo "The dog is asleep" | gawk '/cat|dog/{print $0}'
		The dog is asleep
		
	6、表达式分组
		正则表达式模式也可以用圆括号进行分组。
		当你将正则表达式模式分组时，该组会被视为一个标准字符。
		可以像对普通字符一样给该组使用特殊字符。
		
------------------------------------------------------------------------------------------------------------		
20.4正则表达式实战
	1、目录文件计数
		#!/bin/bash
		# count number of files in your PATH
		mypath=$(echo $PATH | sed 's/:/ /g')
		count=0
		for directory in $mypath
		do
			check=$(ls $directory)
			for item in $check
			do
				count=$[ $count + 1 ]
			done
			echo "$directory - $count"
			count=0
		done
		
	2、验证电话号码
		(123)456-7890
		(123) 456-7890
		123-456-7890
		123.456.7890
		
		^\(?[2-9][0-9]{2}\)?(| |-|\.)[0-9]{3}( |-|\.)[0-9]{4}$
		
		#!/bin/bash
		gawk --re-interval '/^\(?[2-9][0-9]{2}\)?(| |-|\.)[0-9]{3}( |-|\.)[0-9]{4}$/{print $0}'
		
	3、解析邮件地址
		邮件地址的基本格式为：username@hostname
		
		username 值可用字母数字字符以及以下特殊字符：
		  点号
		  单破折线
		  加号
		  下划线
		【在有效的邮件用户名中，这些字符可能以任意组合形式出现】
		
		邮件地址的 hostname 部分由一个或多个域名和一个服务器名组成。
		服务器名和域名也必须遵照严格的命名规则，只允许字母数字字符以及以下特殊字符：
			点号
  		下划线

		服务器名和域名都用点分隔，先指定服务器名，紧接着指定子域名，最后是后面不带点号的顶级域名。
			^([a-zA-Z0-9_\-\.\+]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
		
------------------------------------------------------------------------------------------------------------		
20.5小结
	sed编辑器基本符合BRE引擎，而gawk程序则使用了ERE引擎中的大多数特性。
		
		
		


		
		
		
		
		
		
		
		
		
		
		
		
		
		




