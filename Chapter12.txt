**************************************************************************************************
--------------------------------------------------------------------------------------------------
12.1 
	1、if-then
	if  command
	then
		commands
	fi
	
	如果if后面命令的退出状态码是 0，位于 then 部分的命令就会被执行。如果不是0就不会执行then后面的命令，而跳出if
	-then语句。继续执行下面的语句，但是错误的信息依然后打印在屏幕上

	2、if-then-else
			if  command
			then
				commands
			else
				commands
		fi
		
	3、嵌套 if
		if  command1
		then
			commands
		elif  command2
		then
			more  commands
		fi
		可以继续将多个 elif 语句串起来
	4、test 命令
		格式test condition
		if test condition
		then
			commands
		fi
		如果不写 test 命令的 condition 部分，它会以非零的退出状态码退出，并执行 else 语句块。

		my_variable="Full"

		if test $my_variable
		then
			echo "The $my_variable expression returns a True"
		else
			echo "The $my_variable expression returns a False"
		fi
		The Full expression returns a True
		
		【 test 测试的是一个变量，这个变量有内容，返回的退出状态为0。】
		【 当测试命令的时候用的是test command,当测试条件时，用的是[] 】
		test命令还可以进行一下条件判断 --  【 使用[] 】
			数值   字符串  文件
			
	5、test进行数值比较--数值条件测试可以用在数字和变量上
		n1 -eq n2 --> 检查 n1 是否与 n2 相等
		n1 -ge n2 --> 检查 n1 是否大于或等于 n2
		n1 -gt n2 --> 检查 n1 是否大于 n2
		n1 -le n2 --> 检查 n1 是否小于或等于 n2
		n1 -lt n2 --> 检查 n1 是否小于 n2
		n1 -ne n2 --> 检查 n1 是否不等于 n2
		注意：bash shell只能处理整数，如果是浮点数会报错
		
	6、test进行字符串比较  --  【 使用数学符号比较字符串，其中  >  <  需要转义】
		str1 = str2 --> 检查 str1 是否和 str2 相同
		str1 != str2 --> 检查 str1 是否和 str2 不同
		str1 < str2 --> 检查 str1 是否比 str2 小
		str1 > str2 --> 检查 str1 是否比 str2 大
		-n str1 --> 检查 str1 的长度是否非0
		-z str1 --> 检查 str1 的长度是否为0
		a、相等性
			在比较字符串的相等性时，比较测试会将所有的标点和大小写情况都考虑在内
		b、字符串顺序
		要测试一个字符串是否比另一个字符串大
			大于号和小于号必须转义，否则shell会把它们当作重定向符号，把字符串值当作文件名；
			大于和小于顺序和 sort 命令所采用的不同--使用的是标准的ASCII顺序
		c、 【 字符串长度 --  -n 和 -z 可以检查一个变量是否含有数据。】

--------------------------------------------------------------------------------------------------
12.4
	1、test 命令和测试表达式使用【 标准的数学比较符号来表示字符串比较 】
		数学比较符  =  >  <  !=  -n(长度是否非零)  -z(长度是否为零)
			if [ $USER = $testuser ]
		****	
			> < 是重定向符号，为了区别，在比较时应该加上 \转义符号\
			if [ aa \> AA ]  --> test对字符串的比较是基于 ASCII码 进行的
		****	
	而用文本代码来表示数值比较。
		文  本  码  -eq  -nq  -ge  -gt  -le  -lt 
			if [ $value1 -gt 5 ]
			
	【 如果你对 数值 使用了 数学运算符号，shell会将它们当成 字符串值ASCII码 】
		
	2、空的和未初始化的变量会对shell脚本测试造成灾难性的影响。 如果不是很确定一个变量的内容， 最好在将
	其用于 数值或字符串比较 之前先通过 -n 或 -z 来测试一下变量是否含有值。
		if [ -n $val1 ]
	
	3、文件比较
		-d file  -->  检查 file 是否存在并是一个目录
		-e file  -->  检查 file 是否存在
		-f file  -->  检查 file 是否存在并是一个文件
		-r file  -->  检查 file 是否存在并可读
		-s file  -->  检查 file 是否存在并非空
		-w file  -->  检查 file 是否存在并可写
		-x file  -->  检查 file 是否存在并可执行
		-O file  -->  检查 file 是否存在并属当前用户所有
		-G file  -->  检查 file 是否存在并且默认组与当前用户相同
		file1 -nt file2  -->  检查 file1 是否比 file2 新
		file1 -ot file2  -->  检查 file1 是否比 file2 旧
			
		a、检查目录 -d 测试会检查指定的目录是否存在于系统中
			jump_directory=/home/arthur
			
			if [ -d $jump_directory ]
			then
				echo "The $jump_directory directory exists"
				cd $jump_directory
			ls
			else
				echo "The $jump_directory directory does not exist"
			fi
			if后的方括号，在第一个方括号之后和第二个方括号之前都有空格
		b、 检查对象是否存在  -e 检查文件或者目录是否存在
		
	4、复合条件测试 &&  ||
		[ condition1 ] && [ condition2 ]
		[ condition1 ] || [ condition2 ]
		
------------------------------------------------------------------------------------------------------------	
12.6if-then 的高级特性
	1、用于数学表达式的 ((双括号)) --  (( expression ))
		【 ((双括号)) 可以在if语句中使用，也可以在脚本中给普通变量赋值 】
			if (( $val1 ** 2 > 90 ));then
			(( val2 = $val1 ** 2 ))
	
		可以在 if 语句中用双括号命令
			val++ --> 后增 
			val-- --> 后减
			++val --> 先增
			--val --> 先减
			!     --> 逻辑求反
			~     --> 位求反
			**    --> 幂运算
			<<    --> 左位移
			>>    --> 右位移
			&     --> 位布尔和
			|     --> 位布尔或
			&&    --> 逻辑和
			||    --> 逻辑或
		【 双括号中的大于号不用转义 】
	
	2、用于高级字符串处理功能的 [[双方括号]] --  [[ expression ]]
		双方括号里的 expression 使用了 test 命令中采用的标准字符串比较。
		但它提供了 test 命令未提供的另一个特性——模式匹配（pattern matching）。
		if [[ $USER == r* ]];then
		echo "Hello $USER"
			
------------------------------------------------------------------------------------------------------------
12.7、case 命令
	1、
	case  variable in
	pattern1 |  pattern2 )  commands1 ;;   ##两个模式使用同一个命令
	pattern3 )  commands2 ;;               ##匹配单个模式    
	*)  default commands ;;                ##匹配一切的默认值
	esac
	
	case $USER in
	rich | barbara)
		echo "Welcome, $USER"
		echo "Please enjoy your visit";;
	testing)
		echo "Special testing account";;
	jessica)
		echo "Do not forget to log off when you're done";;
	*)
		echo "Sorry, you are not allowed here";;
	esac
	【 每一个分支结束用双分号隔开，用*)代表其他任意选项 】
	
------------------------------------------------------------------------------------------------------------
12.8小结
	1、if语句可以用来测试 一条命令，也可以用来测试一个条件（用test），then语句是否执行取决于if后面的命令或者
	test条件的退出状态码，为0则执行then后的语句，非0则不执行
	
	2、可以在 if-then 语句中将测试条件放在 [方括号] 中来测试数值、字符串和文件条件。
		【 第一个方括号之后和第二个方括号之前必须是空格 】
		数值--使用标准字符做比较 -eq -ge -gt -le -lt -ne(不等于)
		字符串--使用标准数值比较的符号：= != > < -n(长度是否非0)  -z(长度是否为0) 
		文件和文件夹 -e -d -f -r -w -x -O -G -s(是否非空)   file1 -nt/-ot file2
		
	3、双括号使用另一种操作符进行高级数学运算。双方括号命令允许高级字符串模式匹配运算。
	
		












