 ************************************************************************************************************
------------------------------------------------------------------------------------------------------------
16 脚本控制方法 
	1、向脚本发送信号   
	
	2、修改脚本的优先级 
	
	3、在脚本运行时切换到运行模式

------------------------------------------------------------------------------------------------------------
16.1处理信号
	1、通过对脚本进行编程，使Linux进程在收到特定信号时执行某些命令，从而控制shell脚本的操作
	
	2、常见的Linux信号
		1     SIGHUP     挂起进程
		2     SIGINT     终止进程
		3     SIGQUIT    停止进程
		9     SIGKILL    无条件终止进程
		15    SIGTERM    尽可能终止进程
		17    SIGSTOP    无条件停止进程，但不是终止进程
		18    SIGTSTP    停止或暂停进程，但不终止进程
		19    SIGCONT    继续运行停止的进程
		
		【 停止进程会让程序继续保留在内存中，并能从上次停止的位置继续运行 】
		bash shell会忽略收到的任何 SIGQUIT (3) 和 SIGTERM (5) 信号（正因为这样，交互式shell才不会被意外终止）
		【 shell会将这些信号传给shell脚本程序来处理。】
		而shell脚本的默认行为是忽略这些信号。
		所以在脚本中加入识别信号的代码就尤为有必要。
		
	3、生成信号
		1.中断进程 Ctrl + C   SIGINT   停止进程
		
		2.暂停进程 Ctrl + Z   SIGTSTP  无条件停止进程，但不是终止进程
		
		3.$ sleep 100
		  ^Z
		  [1]+ Stopped sleep 100
		  方括号中 [1] 是作业号。第一个是1，第二个是2
		  
		4. ps 命令将已停止作业的状态为显示为 T 
		
		5.如果在有已停止作业存在的情况下，你仍旧想退出shell，
		只要再输入一遍 exit 命令就行了。shell会退出，终止已停止作业。
		
	4、捕获信号【 trap 】
		1、 trap 命令允许你来指定shell脚本要监看并从shell中拦截的Linux信号。
			【 如果脚本收到了 trap 命令中列出的信号，该信号不再由shell处理，而是交由本地处理。】
			trap commands signals
		
		2、在 trap 命令行上，你只要列出想要shell执行的命令，以及一组用空格分开的待捕获的信号。
			你可以用数值或Linux信号名来指定信号。
			#!/bin/bash
			# Testing signal trapping
			
			trap "echo ' Sorry! I have trapped Ctrl-C'" SIGINT   #trap后用的是双引号
			
			echo This is a test script
			
			count=1
			while [ $count -le 10 ]
			do
			echo "Loop #$count"
			sleep 1
			count=$[ $count + 1 ]
			done
			
			echo "This is the end of the test script"
			
	5、捕获脚本退出  --  在shell脚本退出时进行捕获
		1.【 捕获shell脚本的退出，只要在 trap 命令后加上 EXIT 信号就行。】
		
		2.#!/bin/bash
			# Trapping the script exit
			
			trap "echo Goodbye..." EXIT
			
			count=1
			while [ $count -le 5 ]
			do
				echo "Loop #$count"
				sleep 1
				count=$[ $count + 1 ]
			done
			
	6、修改或移除捕获
		1.【 要想在脚本中的不同位置进行不同的捕获处理，只需重新使用带有新选项的 trap 命令。】
		
		2.也可以删除已设置好的捕获。
		只需要在 trap 命令与希望 恢复默认行为 的信号列表之间加上 --两个破折号-- 或者 -单破折号- 就行了。
			即：在上文中指定了要捕获的信号，在下文中用 trap -- 信号名 来删除信号

------------------------------------------------------------------------------------------------------------			
16.2 以后台模式运行脚本
	1、【 在后台模式中，进程运行时不会和终端会话上的 STDIN 、 STDOUT 以及 STDERR 关联 】
	
	2、后台运行脚本【 & 】
		【 在命令后加个 & 符，即可在后台运行脚本 】
		当 & 符放到命令后时，它会将命令和 bash shell 分离开来，将命令作为系统中的一个独立的后台进程运行。
		#!/bin/bash
		# Test running in the background
		
		count=1
		while [ $count -le 10 ]
		do
		sleep 1
		count=$[ $count + 1 ]
		done
		
		$ ./test4.sh &
		[1] 3231
		方括号中数字是作业号， 3231是运行命令的PID
		然后命令行界面提示符就出现了，可以接受新的命令，而脚本在后台运行
		当后台进程结束时，它会在终端显示一条信息
		[1]  done           ./test4
		作业号    状态     命令
		
	3、当后台进程运行时，它仍然会使用终端显示器来显示 STDOUT 和 STDERR 消息。
		【 最好是将后台运行的脚本的 STDOUT 和 STDERR重定向 】
	
	4、运行多个后台作业
		在 ps 命令的输出中，每一个后台进程都和终端会话（ pts/0 ）终端联系在一起。
		【 如果终端会话退出，那么后台进程也会随之退出。】
	
------------------------------------------------------------------------------------------------------------
16.3 在非控制台下运行脚本 【 nohup 】
	1、在终端会话中启动shell脚本，然后让脚本一直以后台模式运行到结束 【即使你退出了终端会话。】
		nohup 命令运行了 另外一个命令 来阻断所有发送给该进程的 SIGHUP 信号。 
		【这会在退出终端会话时阻止进程退出。】
	
	2、$nohup ./script.sh &
	   $[1] 3856
	   $ nohup: ignoring input and appending output to 'nohup.out'
	   【 当你使用 nohup 命令时，如果关闭该会话，脚本会忽略终端会话发过来的 SIGHUP 信号。】
	    nohup 命令会自动将 STDOUT 和 STDERR 的消息重定向到一个名为 nohup.out 的文件中。
	
	3、如果使用 nohup 运行了另一个命令， 该命令的输出会被追加到已有的nohup.out文件中。
		【 在同意目录中时，所有的输出会追加在同一个文件中。】
		
------------------------------------------------------------------------------------------------------------
16.4 作业控制  --  启动、停止、终止以及恢复作业
	1、查看作业【 jobs 】
		1.【 脚本用 $$ 变量来显示Linux系统分配给该脚本的PID 】
		
		2.jobs 命令可以查看分配给shell的作业。
		给jobs 加上-l 选项，可以以长列表的方式显示作业信息
			$ jobs -l
			[1]+ 1897 Stopped ./test10.sh
			[2]- 1917 Running ./test10.sh > test10.out &
			带加号的作业会被当做默认作业。
			在使用作业控制命令时，如果未在命令行指定任何作业号，该作业会被当成作业控制命令的操作对象。
			当前的默认作业完成处理后，带减号的作业成为下一个默认作业。
			任何时候都只有一个带加号的作业和一个带减号的作业，不管shell中有多少个正在运行的作业。
		
		3.常用的命令
			-l   -->   列出进程的PID以及作业号
			-n   -->   只列出上次shell发出的通知后改变了状态的作业
			-p   -->   只列出作业的PID
			-r   -->   只列出运行中的作业
			-s   -->   只列出已停止的作业
		
	2、重启停止的作业【  bg 命令加上作业号 】
		1.默认作业，只需要使用 bg 命令就可以将其以后台模式重启。
		
		2. bg 命令后加上作业号
			$ ./test11.sh
			^Z
			[1]+ Stopped ./test11.sh
			
			$ ./test12.sh
			^Z
			[2]+ Stopped ./test12.sh
			
			$ bg 2
			[2]+ ./test12.sh &
			
			$ jobs
			[1]+ Stopped ./test11.sh
			[2]- Running ./test12.sh &
		
------------------------------------------------------------------------------------------------------------
16.5 调整谦让度
	1、在多任务操作系统中（Linux就是） ，内核负责将CPU时间分配给系统上运行的每个进程。
		调度优先级（scheduling priority）是内核分配给进程的CPU时间（相对于其他进程） 。
		在Linux系统中，由shell启动的所有进程的调度优先级默认都是相同的。
		调度优先级是个整数值，从?-20（最高优先级）到+19（最低优先级） 【“好人难做”】。
		【 默认情况下，bash shell以优先级0来启动所有进程。】
	
	2、nice 命令
			nice -n -10 ./test4.sh > test4.out &
			[1] 4985
			
		nice 命令的 -n 选项并不是必须的，只需要在破折号后面跟上优先级就行了
			$ nice -10 ./test4.sh > test4.out &
			[1] 4993
			
			$ ps -p 4993 -o pid,ppid,ni,cmd
			PID   PPID  NI   CMD
			4993  4721  10   /bin/bash ./test4.sh
	
	3、renice 命令  --  改变系统上已运行命令的优先级
		1.允许指定运行进程的PID来改变它的优先级
		
		2.  $ renice -n 10 -p 5055
			5055: old priority 0, new priority 10
			
			$ ps -p 5055 -o pid,ppid,ni,cmd
			PID   PPID  NI  CMD
			5055  4721  10  /bin/bash ./test11.sh
			
		3.renice的限制
			a、只能对属于你的进程执行 renice ；
?  		b、只能通过 renice 降低进程的优先级；
? 			c、root用户可以通过 renice 来任意调整进程的优先级。

------------------------------------------------------------------------------------------------------------					
16.6 定时运行作业  --  at 命令和 cron 表
	1、用 at 命令来计划执行作业
		1. atd 守护进程会每60秒检查一下目录（通常位于/var/spool/at）来获取用 at 命令提交的作业
		
		2. at 命令的格式
			at [-f filename] time
			默认情况 at 命令会将 STDIN 的输入放到队列中。 
			用 -f 来指定（脚本文件）的文件名。
			time 参数指定Linux系统运行脚本的时间
			如果时间已经错过， at 命令会在第二天的那个时间运行指定的作业。
		
		3.如何制定时间
			标准的小时和分钟格式，比如10:15。
?  		AM/PM指示符，比如10:15 PM。
?  		特定可命名时间，比如now、noon、midnight或者teatime（4 PM）。
			标准日期格式，比如MMDDYY、MM/DD/YY或DD.MM.YY。
? 			文本日期，比如Jul 4或Dec 25，加不加年份均可。
? 			也可以指定时间增量。
			?  当前时间+25 min
			?  明天10:15 PM
			?  10:15+7天
			
		4.使用 at 命令时，该作业会被提交到作业队列（job queue） 。
			针对不同优先级， 存在26种不同的作业队列。
			作业队列通常用小写字母a~z和大写字母A~Z来指代。
			
			作业队列的字母排序越高，作业运行的优先级就越低（更高的 nice 值） 。
			默认情况下， at 的作业会被提交到 a 作业队列。 
			【 如果想以更高优先级运行作业， 可以用 -q 参数指定不同的队列字母。】
		
		5.获取作业的输出
			执行作业，任何发到 STDOUT 或 STDERR 的输出都会通过邮件系统发送给该用户。
			因此在使用 at 命令时，最好在脚本中对 STDOUT 和 STDERR 进行重定向。
			#!/bin/bash
			# Test using at command
			
			echo "This script ran at $(date +%B%d,%T)"
			echo
			sleep 5
			echo "This is the script's end..."
			
			$ at -f test13.sh now
			job 7 at 2015-07-14 12:38
		
		6.作业输出到重定向
			#!/bin/bash
			# Test using at command
			
			echo "This script ran at $(date +%B%d,%T)" > test13b.out
			echo >> test13b.out
			sleep 5
			echo "This is the script's end..." >> test13b.out
			
			
			$ at -M -f test13b.sh now
			job 8 at 2015-07-14 12:48
			
			$ cat test13b.out
			This script ran at July14,12:48:18
			This is the script's end...
			【 date +%B%d,%T -->  July14,12:48:18 】
			【加上 -M 选项来屏蔽作业产生的输出信息】
			
		7.列出等待的作业  --  【 atq 】
			$ atq
			20 2015-07-14 13:03 = Christine
			18 2015-07-15 13:03 a Christine
			17 2015-07-14 16:00 a Christine
			19 2015-07-14 13:30 a Christine
			作业列表中显示了作业号、系统运行该作业的日期和时间及其所在的作业队列
			
		8.删除作业  --  【  atrm 】
			$ atq
			18 2015-07-15 13:03 a Christine
			17 2015-07-14 16:00 a Christine
			19 2015-07-14 13:30 a Christine
			
			$ atrm 18
			
			$ atq
			17 2015-07-14 16:00 a Christine
			19 2015-07-14 13:30 a Christine
			
	2、安排需要定期执行的脚本  --  【 cron 】
		1.Linux系统使用cron程序来安排要定期执行的作业。 cron程序会在后台运行并检查一个特殊的表
		
		2.cron时间表
			min hour dayofmonth month dayofweek command
			cron时间表允许你用 特定值、取值范围（比如1~5）或者是 通配符（星号）来指定条目。
			例如，如果想在每天的10:15运行一个命令，可以用cron时间表条目：
					15 10 * * * command
				每周一4:15 PM
					15 16 * * 1 command
				【三字符（montue、wed、thu、fri、sat、sun）或是0-6指定 dayofweek】	
				每个月的第一天中午12点
				00 12 1 * * command
				每个月最后一天的中午12点
				00 12 * * * if [ ` date +%d -d tomorrow ` = 01 ] ; then ; command
		
		3.命令列表必须指定要运行的命令或脚本的全路径名。
		你可以像在普通的命令行中那样，添加任何想要的命令行参数和重定向符号。
			15 10 * * * /home/rich/test4.sh > test4out
			
		4.构建cron时间表【 crontab 】
			$crontab -l   #要列出已有的cron时间表
			$crontab -e   #向corn列表添加条目
			
		5.浏览cron目录
			如果你创建的脚本对精确的执行时间要求不高，用预配置的cron脚本目录会更方便。
			有4个基本目录：hourly、daily、monthly和weekly。
			/etc/cron.daily   /etc/cron.hourly   /etc/cron.monthly    /etc/cron.weekly
			分别表示小时，天，月，周 为周期执行一次
		
		6.anacron程序
			解决cron程序在关机状态错过时间点不再执行的问题，anacron程序会在错过时间点的开机时先运行错过的
			作业
			
			anacron程序只会处理位于cron目录的程序，比如/etc/cron.monthly
			
			anacron程序使用自己的时间表（通常位于/etc/anacrontab）来检查作业目录
			
	3、使用新 shell 启动脚本
		1.当用户登入bash shell时需要运行的启动文件，
			依照下列顺序所找到的第一个文件会被运行，其余的文件会被忽略
			$HOME/.bash_profile
		?  $HOME/.bash_login
		?  $HOME/.profile
		
		2.每次启动一个新shell时，bash shell都会运行.bashrc文件。

------------------------------------------------------------------------------------------------------------		
16.7 小结
	1、Linux系统允许利用信号来控制shell脚本 
		停止 Ctrl + Z   终止  Ctrl + C  
	
	2、脚本中用 trap 语句来捕获信号并执行特定命令
	
	3、可以在命令名后加一个 & 符号来让脚本或命令以后台模式运行
	
	4、任何通过这种方法运行的后台进程仍会绑定到该终端会话。
	如果退出了终端会话，后台进程也会退出。
	可以用 nohup 命令阻止这种情况发生。
	
	5、nice 命令和 renice 命令可以调整进程的优先级。
	通过降低进程的优先级，你可以让给该进程分配更少的CPU时间。
	
	6、at命令允许你在预设的时间运行脚本。
	cron程序提供了定期运行脚本的接口。
			
			
			
			
		
	


































