 ************************************************************************************************************
 ------------------------------------------------------------------------------------------------------------
 14.1命令行参数
	1、位置参数变量是标准的数字： $0 是程序名， $1 是第一个参数， $2 是第二个参数，依次类推
		#!/bin/bash
		# using one command line parameter

		factorial=1
		for (( number = 1; number <= $1 ; number++ ))
		do
			factorial=$[ $factorial * $number ]
		done
		echo The factorial of $1 is $factorial

		$ ./test1.sh 5
		The factorial of 5 is 120
		上例中，5是$1 第一个参数，脚本中factorial=1,是把5传进脚本赋值给factorial
		
	2、如果需要输入更多的命令行参数，则每个参数都必须用空格分开。大于9个时，在脚本内${10}这样引用
		#!/bin/bash
		total=$[ $1 * $2 ]  #用$1,$2来操作传进来的参数
		echo The first parameter is $1.
		echo The second parameter is $2.
		echo The total value is $total.

		$ ./test2.sh 2 5
		The first parameter is 2.
		The second parameter is 5.
		The total value is 10.
		
	3、每个参数都是用空格分隔的，所以shell会将空格当成两个值的分隔符。要在参数值中包含空格，
	必须要用引号（单引号或双引号均可）。
		$ ./test3.sh 'Rich Blum'  #使用引号将带有空格的参数围起来
		Hello Rich Blum, glad to meet you.
		
		$ ./test3.sh "Rich Blum"
		Hello Rich Blum, glad to meet you.
		
	4、读取脚本名
		用 $0 参数获取shell在命令行启动的脚本名。
		但如果使用另一个命令来运行shell脚本，命令会和脚本名混在一起，出现在 $0 参数中。
		
	5、basename 命令会返回不包含路径的脚本名。使用的（小括号） $(basename $0)
		#!/bin/bash
		# Using basename with the $0 parameter
		
		name=$(basename $0)                ##name=$(basename $0) 
		echo
		echo The script name is: $name
		
		$ bash /home/Christine/test5b.sh
		The script name is: test5b.sh
		$
		$ ./test5b.sh
		The script name is: test5b.sh
	
	6、不同脚本名的执行不同的运算
		#!/bin/bash
		# Testing a Multi-function script
		name=$(basename $0)
	
		if [ $name = "addem" ]
		then
			total=$[ $1 + $2 ]
		elif [ $name = "multem" ]
		then
			total=$[ $1 * $2 ]
		fi
	
		echo The calculated value is $total
		
		$
		$ cp test6.sh addem
		$ chmod u+x addem
		
		$ ln -s test6.sh multem
		
		$ ls -l *em
		-rwxrw-r--. 1 Christine Christine 224 Jun 30 23:50 addem
		lrwxrwxrwx. 1 Christine Christine 8 Jun 30 23:50 multem -> test6.sh
		
		$ ./addem 2 5
		The calculated value is 7
		
		$ ./multem 2 5
		The calculated value is 10
		这里通过cp创建了addem，通过ln -s软连接创建了multem.从而执行不同功能。
		注意: name=$(basename $0)  小括号
			  if [ $name = "addem" ] name 前面要加上$
			  通过hgfs共享的文件夹，不支持ln -s 因为windows是NTFS 而Linux是ext4
			  可以通过cp mv实现复制和重命名
			  
	7、上例中直接使用了$1和$2，如果用户不输入，就会报错。这种写法不合理。最好在使用前先判断参数是否
	存在
		#!/bin/bash
		# testing parameters before use
		#
		if [ -n "$1" ]
		then
			echo Hello $1, glad to meet you.
		else
			echo "Sorry, you did not identify yourself. "
		fi
		 
		【 -n 表示长度非零   -z表示长度为零 】
	
------------------------------------------------------------------------------------------------------------
14.2特殊参数变量 $#  $* $@
	1、统计命令行参数的个数 -- $#
		可以在任何地方使用，就想普通变量一样
		可以测试参数的总数
		if [ $# -ne 2 ]  #如果参数的个数不为2，这样就不用一个个的 if [ -n $1 ] 了 
		【 $# 提供了一张表示最后一个参数的方法 ${!#}，第一个是$1 】
		但是，当命令行上没有任何参数时， $# 的值为 0 
		 ${!#} 变量会返回命令行用到的脚本名。
		【 -ne 是不等于 】
			#!/bin/bash
			# Grabbing the last parameter
			
			params=$#
			echo The last parameter is $params
			echo The last parameter is ${!#}
			./test.sh 
				0             -->$param
				test.sh       -->${!#}
		
	2、抓取所有的参数 --  $* 和 $@
		【 $* 变量会将命令行上提供的所有参数当作 一个单词 保存。】 
		基本上 $* 变量会将这些参数视为一个整体，而不是多个个体。
			for param in "$*"  #!!!【 加了“”会当成一个整体，不加“”也是多个词的字符串 】
			do
			echo "\$* Parameter #$count = $param"
			count=$[ $count + 1 ]
			done
			-->$* Parameter #1 = rich barbara katie jessica
		
		【 $@ 变量会将命令行上提供的所有参数当作同一字符串中的 多个独立的单词。】 
			这样就能够遍历所有的参数值，得到每个参数。这通常通过 for 命令完成。
			for param in "$@"   #
			do
			echo "\$@ Parameter #$count = $param"
			count=$[ $count + 1 ]
			done
			--> $@ Parameter #1 = rich
			--> $@ Parameter #2 = barbara
			--> $@ Parameter #3 = katie
		
------------------------------------------------------------------------------------------------------------
14.3移动变量  shift
	1、shift默认把命令行参数向左移动一个位置，最左的参数（不是程序名）将会被删除，可以用来遍历不知道有多少
	个的参数列表，只操作第一个，然后shift
		count=1
		while [ -n "$1" ]  #当第一个参数的长度部位零时，循环继续
		do
			echo "Parameter #$count = $1"
			count=$[ $count + 1 ]
			shift  #单独使用，把参数整体向左移动一个位置，把最左侧的参数删除
		done
		
		$ ./test13.sh rich barbara katie
		Parameter #1 = rich
		Parameter #2 = barbara
		Parameter #3 = katie
		【 使用 shift 命令的时候要小心。如果某个参数被移出，它的值就被丢弃了，无法再恢复 】
		
	2、另外，你也可以一次性移动多个位置，只需要给 shift 命令提供一个参数，指明要移动的位置数就行了
		【 shift N 移动N个位置 】
		
------------------------------------------------------------------------------------------------------------
14.4处理选项
	1、选项是跟在-单破折线-后面的单个字母，它能改变命令的行为。
		ls -i -l -a 
		cat -n 
		mkdir -p
		rm -f -rf
	2、查找选项，分割选项，选项和值
		1. 处理简单选项 -- case 提取选项
			可以向提取参数一样提取选项，用case来判断某个参数是否为选项。
			#!/bin/bash
			# extracting command line options as parameters
			
			while [ -n "$1" ]
			do
				case "$1" in    #这里用了"双引号"
					-a) echo "Found the -a option" ;;
					-b) echo "Found the -b option" ;;
					-c) echo "Found the -c option" ;;
					*) echo "$1 is not an option" ;;
				esac
				shift
			done
			【 case语句，每一条分支开始用 )右括号) ,后面用 ;;双分号;; 分隔， *星号* 匹配任意 】
		
		2. 分离参数和选项  --  --双破折线-- 分离选项和参数
			【 shell会用 --双破折线-- 来表明选项列表结束。】
			在 --双破折线-- 之后，脚本就可以放心地将剩下的命令行参数当作参数，而不是选项来处理了
			要检查 --双破折线-- 只要再加一条就行了
				case "$1" in
					-a) echo "Found the -a option" ;;
					-b) echo "Found the -b option";;
					-c) echo "Found the -c option" ;;
					--) shift
						break ;;
					*) echo "$1 is not an option";;
				esac
			在遇到双破折线时，脚本用 break 命令来跳出 while 循环。
			由于过早地跳出了循环，我们需要再加一条 shift 命令来将 --双破折线-- 移出参数变量。
				count=1
				for param in $@
				do
					echo "Parameter #$count: $param"
					count=$[ $count + 1 ]
				done
		
		3. 处理带值的选项
			1、有些选项会在后面跟上值。
				$ ./testing.sh -a test1 -b -c -d test2
				
			2、用下面的办法处理
				case "$1" in
					-a) echo "Found the -a option";;
					-b) param="$2"
						echo "Found the -b option, with parameter value $param"
						shift ;;
					-c) echo "Found the -c option";;
					--) shift
						break ;;
					*) echo "$1 is not an option";;
				esac
				
				count=1
				for param in "$@"
				do
					echo "Parameter #$count: $param"
					count=$[ $count + 1 ]
				done
				
	3、使用 getopt 命令 -- 能够识别命令行参数
		1、命令的格式
			getopt 命令可以接受一系列任意形式的命令行选项和参数，并自动将它们转换成适当的格式。
				getopt optstring parameters
			optstring 是这个过程的关键所在。它定义了命令行有效的选项字母，还定义了哪些选项字母需要参数值。
			如果某个选项后面需要参数，就在它后面加上 :冒号：
			使用步骤：
				1.在 optstring 中列出你要在脚本中用到的每个命令行选项字母。
				2.在每个需要参数值的选项字母后加一个冒号。getopt 命令会基于你定义的 optstring 解析提供的参数。
				$ getopt ab:cd -a -b test1 -cd test2 test3
				  -a -b test1 -c -d -- test2 test3
				3.如果指定了一个不在 optstring 中的选项，默认情况下， getopt 命令会产生一条错误消息。
					$ getopt ab:cd -a -b test1 -cde test2 test3
						getopt: invalid option -- e  ##报错
						-a -b test1 -c -d -- test2 test3
				4.$ getopt -q ab:cd -a -b test1 -cde test2 test3
					-a -b 'test1' -c -d -- 'test2' 'test3'
					在getopt后面 optstring前面加了-q 选项，忽略了错误信息
		
		2、在脚本中使用 getopt
			用 getopt 命令生成的 格式化后的版本 来替换 已有的命令行选项和参数。
			【 set 命令的选项之一是双破折线（ -- ） ，它会将 set 命令的命令行值 替换成 命令行参数。】
			
			【 set -- $(getopt -q ab:cd "$@") 】
				1.将原始脚本的命令行参数传给 getopt 命令
				2.再将 getopt 命令的输出传给 set 命令
				3.用 getopt 格式化后的命令行参数来替换原始的命令行参数 ：set -- 实现
			
			#!/bin/bash
			# Extract command line options & values with getopt
			
			set -- $(getopt -q ab:cd "$@")
			
			echo
			while [ -n "$1" ]
			do
				case "$1" in
				-a) echo "Found the -a option" ;;
				-b) param="$2"
				echo "Found the -b option, with parameter value $param"
				shift ;;
				-c) echo "Found the -c option" ;;
				--) shift
				break ;;
				*) echo "$1 is not an option";;
				esac
				shift
			done
			count=1
			for param in "$@"
			do
				echo "Parameter #$count: $param"
				count=$[ $count + 1 ]
			done
	4、	使用更高级的 getopts
		getopts optstring variable
		1.每次调用它时，它一次只处理命令行上检测到的一个参数。
		  处理完所有的参数后，它会退出并返回一个大于0的退出状态码。
		  这让它非常适合用解析命令行所有参数的循环中。
		  要去掉错误消息的话，可以在 optstring 之前加一个冒号。 
		  getopts 命令将当前参数保存在 命令行中定义 的 variable 中。
		  
		2.getopts 命令会用到两个环境变量	
		  如果选项需要跟一个参数值， OPTARG 环境变量就会保存这个值。 
		  OPTIND 环境变量保存了参数列表中 getopts 正在处理的参数位置。
		  
		  #!/bin/bash
		  # simple demonstration of the getopts command
		  echo
		  while getopts :ab:c opt  #【 要去掉错误消息的话，可以在 optstring 之前加一个冒号。】
		  do
		  case "$opt" in
			  a) echo "Found the -a option" ;;     ##a前不带破折线
			  b) echo "Found the -b option, with value $OPTARG";;
			  c) echo "Found the -c option" ;;
			  *) echo "Unknown option: $opt";;
		  esac
		  done
		  
		  $ ./test19.sh -ab test1 -c
		  Found the -a option
		  Found the -b option, with value test1
		  Found the -c option
		  
		  1.getopts 命令解析命令行选项时会移除开头的单破折线，所以在 case 定义中不用单破折线。
		  2.getopts命令在循环中自动迭代
		
		3.getopts的好处
			1.可以在参数值中包含空格。
				$ ./test19.sh -b "test1 test2" -a
				Found the -b option, with value test1 test2
				Found the -a option
			2.将选项字母和参数值放在一起使用，而不用加空格。
				$ ./test19.sh -abtest1
				Found the -a option
				Found the -b option, with value test1
			3.将命令行上找到的所有未定义的选项统一输出成问号。
				$ ./test19.sh -acde
				Found the -a option
				Found the -c option
				Unknown option: ?
				Unknown option: ?
		
		4.getopts 命令知道何时停止处理选项，并将参数留给你处理。
			在 getopts 处理每个选项时，它会将 OPTIND 环境变量值增一。
			在 getopts 完成处理时，你可以使用 shift 命令和 OPTIND 值来移动参数。
		
------------------------------------------------------------------------------------------------------------
14.5将选项标准化
	Linux中用到的一些命令行选项的常用含义
		-a   -->   显示所有对象
		-c   -->   生成一个计数
		-d   -->   指定一个目录
		-e   -->   扩展一个对象
		-f   -->   指定读入数据的文件
		-h   -->   显示命令的帮助信息
		-i   -->   忽略文本大小写
		-l   -->   产生输出的长格式版本
		-n   -->   使用非交互模式（批处理）
		-o   -->   将所有输出重定向到的指定的输出文件
		-q   -->   以安静模式运行
		-r   -->   递归地处理目录和文件
		-s   -->   以安静模式运行
		-v   -->   生成详细输出
		-x   -->   排除某个对象
		-y   -->   对所有问题回答yes
	
------------------------------------------------------------------------------------------------------------
14.6 获得用户输入 read
	1、基本的读取 【 variable 】
		read 命令从标准输入（键盘）或另一个文件描述符中接受输入。
		在收到输入后， read 命令会将数据放进一个变量。
		#!/bin/bash
		# testing the read command
		
		echo -n "Enter your name: "
		read name   #在收到输入后， read 命令会将数据放进一个变量。
		echo "Hello $name, welcome to my program. "
		
		$ ./test21.sh
		Enter your name: Rich Blum   #输入的Rich Blum虽然有空格，但都保存在仅有的变量name中
		Hello Rich Blum, welcome to my program.
		
		【 read 后面的变量数对应用户输入的值的个数，不对应则最后一个变量储存所有的剩下的值。】
		如果不指定变量，read会把接收到的数据储存在特殊环境变量 REPLY 中
	
	2、 read 命令包含了【 -p 】选项，允许你直接在 read 命令行指定提示符。
		$ cat test22.sh
		#!/bin/bash
		# testing the read -p option
		#
		read -p "Please enter your age: " age  #提示的内容加载 -p后面
		days=$[ $age * 365 ]
		echo "That makes you over $days days old! "
	
	3、超时 【 -t 】
		用 -t 选项来指定一个计时器。 
		-t 选项指定了 read 命令等待输入的秒数。
		当计时器过期后， read 命令会返回一个非零退出状态码。
		
	4、接受 N 个字符 【 -nN(数字) 】
		#!/bin/bash
		# getting just one character of input
		
		read -n1 -p "Do you want to continue [Y/N]? " answer
		case $answer in
			Y | y) echo
			echo "fine, continue on…";;
			N | n) echo
			echo OK, goodbye
			exit;;
		esac
		echo "This is the end of the script"
		
		$ ./test26.sh
		Do you want to continue [Y/N]? Y
		fine, continue on…
		This is the end of the script
		-n和 数字l 一起使用，让脚本只接受一个字符
	
	5、隐藏方式读取 【 -s 】
		-s 选项可以避免在 read 命令中输入的数据出现在显示器上
		（实际上，数据会被显示，只是read 命令会将文本颜色设成跟背景色一样）。
			
			read -s -p "Enter your password: " pass
			
	6、从文件中读取 【 cat filename | while read variable 】
		 1.read 命令来读取Linux系统上文件里保存的数据。
		 每次调用 read 命令，它都会从文件中读取一行文本。
		 当文件中再没有内容时， read 命令会退出并返回非零退出状态码。
		 最常见的方法是对文件使用 cat 命令，将结果通过管道直接传给含有 read 命令的 while 命令。
		 
			#!/bin/bash
			# reading data from a file
			
			count=1
			cat test | while read line
			do
				echo "Line $count: $line"
				count=$[ $count + 1]
			done
			echo "Finished processing the file"
			
			$ cat test
			The quick brown dog jumps over the lazy fox.
			This is a test, this is only a test.
			O Romeo, Romeo! Wherefore art thou Romeo?
			
			$ ./test28.sh
			Line 1: The quick brown dog jumps over the lazy fox.
			Line 2: This is a test, this is only a test.
			Line 3: O Romeo, Romeo! Wherefore art thou Romeo?
			Finished processing the file
	
------------------------------------------------------------------------------------------------------------
14.7小结
	1、命令行参数允许用户运行脚本时直接从命令行输入数据。
	脚本通过位置参数来取回命令行参数并将它们赋给变量。 variable=$1
	
	2、shift 命令通过对位置参数进行轮转的方式来操作命令行参数。
	就算不知道有多少个参数，这个命令也可以让你轻松遍历参数。
	
	3、$# - 命令行输入的参数总数
	   $* - 会将所有参数保存为一个整体。
	   $@ - 将所有参数都保存为多个单词的字符串。 
	  
	4、命令行选项，可以给不同的选项赋值，从而改变脚本的行为。
	
	5、三种方式来处理命令行选项
		1.可以利用位置参数变量来遍历选项，在每个选项出现在命令行上时处理它
		2.getopt 命令。该命令会将命令行选项和参数转换成可以在脚本中处理的标准格式。optstring
		3.getopts
	
	6、 read 命令支持脚本向用户提问并等待。
		1.variable
		2.-p
		3.-nN
		4.-t
		5.-s
		6.cat filename | while read variable 
			
		
		
		
		
		
	
									
						
				
			
		
		


















			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	