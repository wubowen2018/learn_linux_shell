************************************************************************************************************
------------------------------------------------------------------------------------------------------------
15.1、理解输入和输出 -- 用标准的Linux输入和输出系统来将脚本输出导向特定位置。
	1、标准文件描述符  --  file descriptor 
		0 STDIN      1 STDOUT     2 STDERR
		
	2、STDIN
		对终端界面来说，标准输入是键盘。
		在使用输入重定向符号（ < ）时，Linux会用 重定向指定的文件 来替换 标准输入文件描述符。
		你可以使用 SomeCommand < testfile 将数据输入到任何能从STDIN 接受数据的shell命令中。
		
	3、 STDOUT
		在终端界面上，标准输出就是终端显示器。
		shell的所有输出会被定向到标准输出中，也就是显示器。
		默认情况下，大多数bash命令会将输出导向 STDOUT 文件描述符。  ls -l > test.txt
		通过输出重定向符号， 通常会显示到显示器的所有输出会被shell重定向到指定的重定向文件。
		你也可以将数据追加到某个文件。这可以用 >> 符号来完成。
		标准输出重定向,只会将标准输入重定向到文件，而不会把错误信息重定向
		【 shell对于错误消息的处理是跟普通输出分开的。】 
	
	4、 STDERR
		默认情况下， STDERR 文件描述符会和 STDOUT 文件描述符指向同样的地方。
		但是， STDERR 并不会随着 STDOUT 的重定向而发生改变。
	
	5、 重定向错误 -- 在使用重定向符号时定义 STDERR 文件描述符
		1. 只重定向错误
			$ls -al badfile 2> testfile   #文件描述符2紧挨着>
			$ cat test4
			ls: cannot access badfile: No such file or directory
			
			这里是另一个将 STDOUT 和 STDERR 消息混杂在同一输出中的例子。
			$ ls -al test badtest test2 2> test5
			-rw-rw-r-- 1 rich rich 158 2014-10-16 11:32 test2
			$ cat test5
			ls: cannot access test: No such file or directory
			ls: cannot access badtest: No such file or directory
			
		2. 重定向错误和数据 -- 如果想重定向错误和正常输出，必须用两个重定向符号。
			$ ls -al test test2 test3 badtest 2> test6 1> test7
			$ cat test6
			ls: cannot access test: No such file or directory
			ls: cannot access badtest: No such file or directory
			$ cat test7
			-rw-rw-r-- 1 rich rich 158 2014-10-16 11:32 test2
			-rw-rw-r-- 1 rich rich 0 2014-10-16 11:33 test3
			
		3. 将 STDERR 和 STDOUT 的输出重定向到同一个输出文件  --  &>
			$ ls -al test test2 test3 badtest &> test7
			$ cat test7
			ls: cannot access test: No such file or directory
			ls: cannot access badtest: No such file or directory
			-rw-rw-r-- 1 rich rich 158 2014-10-16 11:32 test2
			-rw-rw-r-- 1 rich rich 0 2014-10-16 11:33 test3
			当使用 &> 符时，命令生成的所有输出都会发送到同一位置，包括数据和错误。
			但是像上面的那样，badtest生成的错误信息优先级高于输出信息。所以这个命令会方便阅读错误信息
		
------------------------------------------------------------------------------------------------------------
15.2 在脚本中重定向输出  -- 永久重定向 和 临时重定向
	1、临时重定向
		1.重定向到STDERR，用输出重定向符将信息重定向到STDERR文件描述符，要在STDERR文件描述符前加&
			echo "This is an error message" >&2
			【 默认情况下，Linux会将 STDERR 导向 STDOUT 。】
		
		2.例子
			#!/bin/bash
			# testing STDERR messages
			echo "This is an error" >&2
			echo "This is normal output"
			
			$ ./test8
			This is an error
			This is normal output
			【 默认情况下，Linux会将 STDERR 导向 STDOUT 。】
			$ ./test8 2> test9
			This is normal output
			$ cat test9
			This is an error
			通过 STDERR 文件描述符重定向错误消息到指定的文件。
		
	2、永久重定向
		1、用 exec 命令告诉shell在脚本执行期间重定向某个特定文件描述符。 -- exec N> filename
		#!/bin/bash
		# redirecting all output to a file
		exec 1>testout
		echo "This is a test of redirecting all output"
		echo "from a script to another file."
		echo "without having to redirect every individual line"
		
		$ ./test10
		$ cat testout
		This is a test of redirecting all output
		from a script to another file.
		without having to redirect every individual line
		
		exec 命令会启动一个新shell并将 STDOUT 文件描述符重定向到文件。 
		脚本中发给 STDOUT 的所有输出会被重定向到文件。
	
------------------------------------------------------------------------------------------------------------
15.3在脚本中重定向输入
	exec 0< testfile
	这个命令会告诉shell它应该从文件 testfile 中获得输入，而不是 STDIN 。
	
------------------------------------------------------------------------------------------------------------
15.4创建自己的重定向
	1、在shell中最多可以有9个打开的文件描述符。其他6个从 3 ~ 8 的文件描述符均可用作输入或输出重定向。
	
	2、创建输出文件描述符 -- 用 exec 命令来 给输出 分配文件描述符。
		#!/bin/bash
		# using an alternative file descriptor
		exec 3>test13out
		echo "This should display on the monitor"
		echo "and this should be stored in the file" >&3
		echo "Then this should be back on the monitor"
		
		$ ./test13
		This should display on the monitor
		Then this should be back on the monitor
		$ cat test13out
		and this should be stored in the file
		也可以使用 exec 命令来将输出追加到现有文件中。
			exec 3>>test13out
	
	3、重定向文件描述符
		1、怎么恢复已重定向的文件描述符？
			#!/bin/bash
			# storing STDOUT, then coming back to it
			
			exec 3>&1
			exec 1>test14out
			
			echo "This should store in the output file"
			echo "along with this line."
			
			exec 1>&3
			
			echo "Now things should be back to normal"
			
			$ ./test14
			
			Now things should be back to normal
			$ cat test14out
			This should store in the output file
			along with this line.
		
		2、创建输入文件描述符
			#!/bin/bash
			# redirecting input file descriptors
			exec 6<&0
			exec 0< testfile
			count=1
			while read line
			do
				echo "Line #$count: $line"
				count=$[ $count + 1 ]
			done
			exec 0<&6
			read -p "Are you done now? " answer
			case $answer in
				Y|y) echo "Goodbye";;
				N|n) echo "Sorry, this is the end.";;
			esac
			
			$ ./test15
			Line #1: This is the first line.
			Line #2: This is the second line.
			Line #3: This is the third line.
			Are you done now? y
			Goodbye
			
		3、创建读写文件描述符
			1、可以用同一个文件描述符对同一个文件进行读写。
				对同一个文件进行数据读写，shell会维护一个内部指针，
				指明在文件中的当前位置。【 任何读或写都会从文件指针上次的位置开始。】
					#!/bin/bash
					# testing input/output file descriptor
					exec 3<> testfile  #读写testfile
					read line <&3
					echo "Read: $line"
					echo "This is a test line" >&3
					
					$ cat testfile
					This is the first line.
					This is the second line.
					This is the third line.
					$ ./test16
					Read: This is the first line.
					$ cat testfile
					This is the first line.
					This is a test line
					ine.
					This is the third line.
				当读取完了第一行，文件指针在第二行开头，往里写数据就覆盖了第二行的数据
			
		4、关闭文件描述符 【 &- 】
			1.将文件描述符重定向到特殊符号 &-，关闭文件描述符
				exec 3>&-
			
			2.一旦关闭了文件描述符，就不能在脚本中向它写入任何数据，否则shell会生成错误消息。
			
			3.关闭文件描述符后重新打开同一个输出文件，shell会用一个新文件来替换已有文件。
				这意味着如果你输出数据，它就会覆盖已有文件。

------------------------------------------------------------------------------------------------------------
15.5列出打开的文件描述符 【  lsof or /usr/sbin/lsof  】
	1、lsof 命令会列出整个Linux系统打开的所有文件描述符。
		1.提供筛选功能的选项和参数
			-p 指定进程  -d 指定文件描述符编号
			
		2.默认输出
			COMMAND  -->  正在运行的命令名的前9个字符
			PID      -->   进程的PID
			USER     -->   进程属主的登录名
			FD       -->   文件描述符号以及访问类型（ r 代表读， w 代表写， u 代表读写）
			TYPE     -->   文件的类型（ CHR 代表字符型， BLK 代表块型， DIR 代表目录， REG 代表常规文件）
			DEVICE   -->   设备的设备号（主设备号和从设备号）
			SIZE     -->   如果有的话，表示文件的大小
			NODE     -->   本地文件的节点号
			NAME     -->   文件名

------------------------------------------------------------------------------------------------------------
15.6阻止命令输出 【 /dev/null 】
	1、不想显示错误信息的时候，讲STDERR重定向到 /Dev/null 这样就不会显示繁琐的错误信息了
		$ ls -al badfile test16 2> /dev/null
	
	2、将文件内容清空 -- 输入重定向到 /Dev/null 
		$ cat /dev/null > testfile
		
------------------------------------------------------------------------------------------------------------
15.7 创建临时文件 【 mktemp 】
	1、mktemp命令会在/temp目录中创建一个唯一的临时文件，并使你拥有所有的读写权限，但其他人没法访问它（除root）
	
	2、创建本地临时文件
		mktemp 会在本地目录中创建一个文件。只需指定文件名模板 -- test.xxxxxx
			$ mktemp testing.XXXXXX
		mktemp 命令会用6个字符码替换这6个 X ，从而保证文件名在目录中是唯一的。
	
	3、mktemp命令的输出就是它创建的文件名字。在脚本中使用的mktemp命令，可能将文件名保存在变量中，方便以后引用
		#!/bin/bash
		# creating and using a temp file
		tempfile=$(mktemp test19.XXXXXX)
		exec 3>$tempfile
		echo "This script writes to temp file $tempfile"
		echo "This is the first line" >&3
		echo "This is the second line." >&3
		echo "This is the last line." >&3
		exec 3>&-
		echo "Done creating temp file. The contents are:"
		cat $tempfile
		rm -f $tempfile 2> /dev/null
		
		$ ./test19
		This script writes to temp file test19.vCHoya
		Done creating temp file. The contents are:
		This is the first line
		This is the second line.
		This is the last line.
		$ ls -al test19*
		-rwxr--r-- 1 rich rich 356 Oct 29 22:03 test19*
		
	4、在/tmp 目录创建临时文件
		1.-t 选项会强制 mktemp 命令来在系统的临时目录来创建该文件【 返回全路径而非文件名 】。
			$ mktemp -t test.XXXXXX
			/tmp/test.xG3374
			$ ls -al /tmp/test*
			-rw------- 1 rich rich 0 2014-10-29 18:41 /tmp/test.xG3374
			
		2.
		
		
			
			
			
			
			
			
		
	
	
			
		
			
			
		
































