 ***************************************************************************************************
 ---------------------------------------------------------------------------------------------------
11.1使用多个命令
	1、date-打印日期
	   who-显示谁在系统上登录了
	2、任意多个命令串连在一起使用，只要不超过最大命令行字符数255就行
	
---------------------------------------------------------------------------------------------------
11.2-3创建 shell 脚本文件，显示消息
	1、修改脚本的权限
		chmod a+x script.sh  -->所有的用户都可以执行的权限
		chmod u+x script.sh  -->赋予文件属主执行文件的权限
	2、echo输出字符串时，如果字符串中出现引号，要用另一种引号将字符串划定出来
		$echo 'Rich says "scripting is easy".'  ==>Rich says "scripting is easy".
	   让文本和字符串同行：echo -n "now is: " ; date  -->now is: Tue Jul 30 16:11:23 CST 2019
	   
---------------------------------------------------------------------------------------------------
11.4使用变量
	1、在环境变量名称之前加上美元符（ $ ）来使用这些环境变量
		echo "User info for userid: $USER"
		echo UID: $UID
		echo HOME: $HOME
		在想要输出$的地方要加上\
		$ echo "The cost of the item is \$15"  --> The cost of the item is $15
	2、用户变量
		任何由字母、数字、下划线、区分大小写、长度不超过20个的字符串。引用$variables
		引用变量给其他变量赋值，需要加$
		value1=10;value2=$value1
	3、shell脚本中最有用的特性之一就是可以从命令输出中提取信息，并将其赋给变量
	4、将命令输出赋给变量
		a、反引号字符（ ` ）--用一对反引号把整个命令行命令围起来
			testing='date'
		b、使用 $() 格式 -- 【 对变量的引用可以直接 $variable,对命令的引用要加 (括号) $(date) 】
			testing=$(date) list=$(cat $file)
		【 为了方便，只用$()这种方式 】
			testing=$(date)
			echo "The date and time are: " $testing
		 -->The date and time are: Mon Jan 31 20:23:25 EDT 2014
    ****
		5、提取日期信息来生成日志文件名的命名，生成日志时间的常用方法
			today=$(date +%y%m%d), +%y%m%d 格式告诉 date 命令将日期显示为两位数的年月日的组合
			echo $today  -->190730
			可以在脚本中使用 XXX.$today 生成有6位数时间组合后缀的文件，通常用来生成日志
			
			使用 . ./script.sh在当前shell运行，就不会创建子shell运行脚本了。
			第一个.是bash的内置命令，表示在当前shell运行，
			./script.sh是运行script的命令
	****

---------------------------------------------------------------------------------------------------
11.5重定向输入和输出
	输出重定向-把前一个命令的输出写入文件
		date > test --把日期时间【覆盖】到test
		who >> test --把谁在登录【追加】到test

	输入重定向
	1、格式command < inputfile

	2、wc 命令用来统计文本，会输出三个数
		行数  词数   字节数

	3、内联输入重定向--必须指定一个文本标记来划分输入数据的开始和结尾。
	任何字符串都可作为文本标记，但在数据的开始和结尾文本标记必须一致
	
--------------------------------------------------------------------------------------------------
11.6管道
	1、command1 | command2  --Linux系统实际上会同时运行这两个命令
		在第一个命令产生输出的同时，输出会被立即送给第二个命令

	2、ls -l | more   ls -l | less

--------------------------------------------------------------------------------------------------
11.7执行数学计算
	1、使用方括号--被方括号括起来的内容不会被linux误认为是通配符
		 $[ operation ]   
		 $var1=$[1 + 5]  
		 $echo $var1   -->6
		 var2=$[$var1 * 2]
		 $echo $var2   -->12

	2、浮点数运算  bc
		variable=$(echo "options; expression" | bc)
		第一部分 options 允许你设置变量。如果你需要不止一个变量，可以用分号将其分开。
		expression 参数定义了通过 bc 执行的数学表达式。
		
		var1=$(echo "scale=4; 3.44 / 5" | bc)
		echo The answer is $var1  -->The answer is .6880
		
		使用内联输入重定向
		variable=$(bc << EOF
		options
		statements
		expressions
		EOF
		)
		EOF是标记，划定了操作的范围。仍然需要命令替换符号将 bc 命令的输出赋给变量
		var1=10.46
		var2=43.67
		var3=33.2
		var4=71

		var5=$(bc << EOF
		scale = 4
		a1 = ( $var1 * $var2)
		b1 = ($var3 * $var4)
		a1 + b1
		EOF
		)
		echo The final answer for this mess is $var5 -->
		在bash计算器中创建的变量只在bash计算器中有效，不能在shell脚本中使用

--------------------------------------------------------------------------------------------------
11.8退出脚本
	1、查看退出状态码，成功为0，错误是一个整数
		echo $?
		126 表明用户没有执行命令的正确权限
		127 无效命令
	2、exit 命令允许你在脚本结束时指定一个退出状态码
		exit 5
		这样在查看退出状态码是会打印5
		也可以使用变量
		exit $var
		当$var的值大于255时，shell会进行取模运算
		300%256 =44
		echo $?   -->44
--------------------------------------------------------------------------------------------------
11.9













		 









